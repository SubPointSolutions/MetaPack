<?xml version="1.0" encoding="utf-16"?>
<DocSample xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <IsMethod>true</IsMethod>
  <IsClass>false</IsClass>
  <Tags />
  <Title>Install_Package</Title>
  <Description />
  <MethodBodyWithFunction>
        
        public void Install_Package()
        {
            // create SharePoint client contex under which MetaPack will be working

            var siteUrl = "http://contoso-intranet.local";

            using (var clientContext = new ClientContext(siteUrl))
            {
                // you can use it with SharePointOnlineCredentials for O365
                // as well as NetworkCredential for SP2013
                // context.Credentials = new NetworkCredential(userName, securePassword);
                // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);


                // create package manager providing client context and NuGet Gallery to work with
                // for instance, as following:
                // nuget.org - https://packages.nuget.org/api/v2
                // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package
                var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");
                var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);

                // get your NuGet package by its ID 
                var nuGetPackage = nuGetRepository.FindPackage("Contoso.Intranet.SiteFields.PnP");

                // configure additional options
                // deployment provider such as PnP or SPMeta2 uses these flags to understand:
                // - SharePoint version (SP2013, SP2016, O365
                // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)
                // - SharePoint Edition (Standard / Foundation for SPMeta2)
                var solutionOptions = new List&lt;OptionValue&gt;();

                solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);
                solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);
                solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);

                // target site Url on which youe solution will be deployed
                solutionOptions.Add(new OptionValue
                {
                    Name = DefaultOptions.Site.Url.Id,
                    Value = siteUrl
                });

                // provide username/password if needed
                // deployment provider will use these in conjunction with CSOM deployment
                // to connect to O365 or local SharePoint via CSOM
                // if SharePoint version was O365, then SharePointOnlineCredentials will be used
                // if SharePoint version was Sp2013/2016, then NetworkCredential will be used
                // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself
                solutionOptions.Add(new OptionValue
                {
                    Name = DefaultOptions.User.Name.Id,
                    Value = "user@contoso.com"
                });

                solutionOptions.Add(new OptionValue
                {
                    Name = DefaultOptions.User.Password.Id,
                    Value = "pass@word1"
                });

                packageManager.SolutionOptions.AddRange(solutionOptions);

                // install package
                // metapack will resolve and install all the things for you
                packageManager.InstallPackage(nuGetPackage, false, false);
            }
        }</MethodBodyWithFunction>
  <MethodBody>// create SharePoint client contex under which MetaPack will be working

var siteUrl = "http://contoso-intranet.local";

using (var clientContext = new ClientContext(siteUrl))
{
    // you can use it with SharePointOnlineCredentials for O365
    // as well as NetworkCredential for SP2013
    // context.Credentials = new NetworkCredential(userName, securePassword);
    // context.Credentials = new SharePointOnlineCredentials(userName, securePassword);


    // create package manager providing client context and NuGet Gallery to work with
    // for instance, as following:
    // nuget.org - https://packages.nuget.org/api/v2
    // myget.org - https://www.myget.org/F/subpointsolutions-staging/api/v2/package
    var nuGetRepository = PackageRepositoryFactory.Default.CreateRepository("https://packages.nuget.org/api/v2");
    var packageManager = new DefaultMetaPackSolutionPackageManager(nuGetRepository, clientContext);

    // get your NuGet package by its ID
    var nuGetPackage = nuGetRepository.FindPackage("Contoso.Intranet.SiteFields.PnP");

    // configure additional options
    // deployment provider such as PnP or SPMeta2 uses these flags to understand:
    // - SharePoint version (SP2013, SP2016, O365
    // - SharePoint API (CSOM, SSOM for SPMeta2 and CSOM for PnP)
    // - SharePoint Edition (Standard / Foundation for SPMeta2)
    var solutionOptions = new List&lt;OptionValue&gt;();

    solutionOptions.Add(DefaultOptions.SharePoint.Api.CSOM);
    solutionOptions.Add(DefaultOptions.SharePoint.Edition.Standard);
    solutionOptions.Add(DefaultOptions.SharePoint.Version.O365);

    // target site Url on which youe solution will be deployed
    solutionOptions.Add(new OptionValue
    {
        Name = DefaultOptions.Site.Url.Id,
        Value = siteUrl
    });

    // provide username/password if needed
    // deployment provider will use these in conjunction with CSOM deployment
    // to connect to O365 or local SharePoint via CSOM
    // if SharePoint version was O365, then SharePointOnlineCredentials will be used
    // if SharePoint version was Sp2013/2016, then NetworkCredential will be used
    // if no username/password is provided, then defaultcreds will be used as if you were on SharePoint box itself
    solutionOptions.Add(new OptionValue
    {
        Name = DefaultOptions.User.Name.Id,
        Value = "user@contoso.com"
    });

    solutionOptions.Add(new OptionValue
    {
        Name = DefaultOptions.User.Password.Id,
        Value = "pass@word1"
    });

    packageManager.SolutionOptions.AddRange(solutionOptions);

    // install package
    // metapack will resolve and install all the things for you
    packageManager.InstallPackage(nuGetPackage, false, false);
}

</MethodBody>
  <Language>cs</Language>
  <Namespace>SubPointSolutions.Docs.Views.MetaPack</Namespace>
  <ClassName>Index</ClassName>
  <MethodName>Install_Package</MethodName>
  <ClassComment />
  <MethodFullName>SubPointSolutions.Docs.Views.MetaPack.Index.Install_Package</MethodFullName>
  <ClassFullName>SubPointSolutions.Docs.Views.MetaPack.Index</ClassFullName>
  <MethodParametersCount>0</MethodParametersCount>
  <SourceFileName>Index.cs</SourceFileName>
  <SourceFileNameWithoutExtension>Index</SourceFileNameWithoutExtension>
  <SourceFileFolder>C:\Users\vagrant\Source\Repos\MetaPack-Git\SubPointSolutions.Docs\bin\Debug\..\..\Views\MetaPack\getting-started</SourceFileFolder>
  <SourceFilePath>C:\Users\vagrant\Source\Repos\MetaPack-Git\SubPointSolutions.Docs\bin\Debug\..\..\Views\MetaPack\getting-started\Index.cs</SourceFilePath>
</DocSample>